[{"name":"app.r","content":"library(shiny)\r\nlibrary(ggplot2)\r\nlibrary(RColorBrewer)\r\nlibrary(wesanderson)\r\n#library(shinythemes)\r\nlibrary(shinylive)\r\n#runGitHub('Teaching', username = 'matbre17', ref = 'main',)\r\n\r\n#app_dir <- \"C:/Users/viy009/OneDrive - University of Bergen/PhD/KJEM250\"\r\n#out_dir <- \"C:/Users/viy009/OneDrive - University of Bergen/PhD/KJEM250/Laboratory\"\r\n#export(appdir = app_dir,destdir = out_dir)\r\n# Define the user interface\r\nui <- fluidPage(\r\n  titlePanel(\"Laboratory Volume Measurements\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      sliderInput(\"numStudents\",\r\n                  \"Number of Students:\",\r\n                  min = 1,\r\n                  max = 5,\r\n                  value = 1,\r\n                  step = 1),\r\n      \r\n      uiOutput(\"volumeInputs\"),\r\n      \r\n      numericInput(\"xMin\", \"X-axis Minimum:\", value = 9),\r\n      numericInput(\"xMax\", \"X-axis Maximum:\", value = 11),\r\n      numericInput(\"yMin\", \"Y-axis Minimum:\", value = 0),\r\n      numericInput(\"yMax\", \"Y-axis Maximum:\", value = 3),\r\n      \r\n      numericInput(\"trueValue\", \"True Value:\", value = 10),\r\n      textInput(\"trueValueLabel\", \"Label for True Value:\", value = \"True Value\"),\r\n      \r\n      textInput(\"xTitle\", \"X-axis Title:\", value = \"Volume\"),\r\n      textInput(\"yTitle\", \"Y-axis Title:\", value = \"Density\"),\r\n      \r\n      selectInput(\"colorScheme\", \"Color Scheme:\",\r\n                  choices = c(\"Spectral\", \"PRGn\", \"Set3\", \"Set2\", \"Set1\", \"Dark2\", \r\n                              \"FantasticFox1\", \"Moonrise3\"))\r\n    ),\r\n    \r\n    mainPanel(\r\n      textOutput(\"statsOutput\"),\r\n      plotOutput(\"tDistPlot\"),\r\n      tableOutput(\"comparisonResults\")\r\n    )\r\n  )\r\n)\r\n\r\n# Define the server logic\r\nserver <- function(input, output) {\r\n  \r\n  output$volumeInputs <- renderUI({\r\n    numStudents <- input$numStudents\r\n    lapply(1:numStudents, function(i) {\r\n      textInput(inputId = paste(\"volume\", i, sep = \"\"),\r\n                label = sprintf(\"Enter volumes for Student %d (comma-separated):\", i))\r\n    })\r\n  })\r\n  \r\n  output$statsOutput <- renderText({\r\n    req(input$numStudents)\r\n    statsList <- lapply(1:input$numStudents, function(i) {\r\n      volumes <- unlist(strsplit(input[[paste(\"volume\", i, sep = \"\")]], \",\\\\s*\"))\r\n      volumes <- as.numeric(volumes)\r\n      if(!any(is.na(volumes)) && length(volumes) > 0) {\r\n        meanVal <- mean(volumes)\r\n        sdVal <- sd(volumes)\r\n        return(sprintf(\"Student %d: Mean = %.2f, SD = %.2f, N = %d\", i, meanVal, sdVal, length(volumes)))\r\n      } else {\r\n        return(sprintf(\"Student %d: Please enter valid numbers or ensure there is data.\", i))\r\n      }\r\n    })\r\n    paste(statsList, collapse = \"\\n\")\r\n  })\r\n  \r\n  output$tDistPlot <- renderPlot({\r\n    req(input$numStudents)\r\n    \r\n    plotData <- data.frame()\r\n    for(i in 1:input$numStudents) {\r\n      volumes <- unlist(strsplit(input[[paste(\"volume\", i, sep = \"\")]], \",\\\\s*\"))\r\n      volumes <- as.numeric(volumes)\r\n      if(!any(is.na(volumes)) && length(volumes) > 0) {\r\n        df <- length(volumes) - 1\r\n        meanVal <- mean(volumes)\r\n        sdVal <- sd(volumes)\r\n        x <- seq(meanVal - 3 * sdVal, meanVal + 3 * sdVal, length.out = 200)\r\n        y <- dt((x - meanVal) / sdVal, df) / sdVal\r\n        plotData <- rbind(plotData, data.frame(Student = as.factor(i), Volume = x, Density = y))\r\n      }\r\n    }\r\n    \r\n    colorPalette <- if(input$colorScheme %in% c(\"FantasticFox1\", \"Moonrise3\")) {\r\n      wes_palette(input$colorScheme, length(unique(plotData$Student)), type = \"discrete\")\r\n    } else if(input$colorScheme %in% rownames(brewer.pal.info)) {\r\n      brewer.pal(min(5, brewer.pal.info[input$colorScheme, \"maxcolors\"]), input$colorScheme)\r\n    } else {\r\n      brewer.pal(5, \"Set1\")\r\n    }\r\n    \r\n    ggplot(plotData, aes(x = Volume, y = Density, color = Student)) +\r\n      geom_line() +\r\n      geom_vline(aes(xintercept = input$trueValue, linetype = \" \"), color = \"black\") +\r\n      scale_linetype_manual(values = c(\" \" = \"dashed\")) +\r\n      scale_x_continuous(limits = c(input$xMin, input$xMax)) +\r\n      scale_y_continuous(limits = c(input$yMin, input$yMax)) +\r\n      scale_color_manual(values = colorPalette) +\r\n      theme_minimal() +\r\n      labs(title = \"T-Distributions of Students' Volumes\",\r\n           x = input$xTitle,\r\n           y = input$yTitle,\r\n           color = \"Student\",\r\n           linetype = input$trueValueLabel)\r\n  })\r\n  \r\n  output$comparisonResults <- renderTable({\r\n    req(input$numStudents)\r\n    \r\n    studentData <- lapply(1:input$numStudents, function(i) {\r\n      volumes <- unlist(strsplit(input[[paste(\"volume\", i, sep = \"\")]], \",\\\\s*\"))\r\n      as.numeric(volumes)\r\n    })\r\n    \r\n    results <- data.frame(Student1 = character(),\r\n                          Student2 = character(),\r\n                          FTestPValue = numeric(),\r\n                          TTestType = character(),\r\n                          TTestPValue = numeric(),\r\n                          stringsAsFactors = FALSE)\r\n    \r\n    for(i in 1:(input$numStudents-1)) {\r\n      for(j in (i+1):input$numStudents) {\r\n        if(!any(is.na(studentData[[i]])) && !any(is.na(studentData[[j]]))) {\r\n          ftest <- var.test(studentData[[i]], studentData[[j]])\r\n          fPValue <- ftest$p.value\r\n          \r\n          if(fPValue < 0.05) {\r\n            ttest <- t.test(studentData[[i]], studentData[[j]], var.equal = FALSE)\r\n            testType <- \"Welch\"\r\n          } else {\r\n            ttest <- t.test(studentData[[i]], studentData[[j]], var.equal = TRUE)\r\n            testType <- \"Standard\"\r\n          }\r\n          \r\n          results <- rbind(results, c(i, j, fPValue, testType, ttest$p.value))\r\n        }\r\n      }\r\n    }\r\n    \r\n    colnames(results) <- c(\"Student1\", \"Student2\", \"FTestPValue\", \"TTestType\", \"TTestPValue\")\r\n    \r\n    return(results)\r\n  })\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
