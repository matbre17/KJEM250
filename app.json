[{"name":"app.r","content":"library(shiny)\r\nlibrary(ggplot2)\r\nlibrary(outliers)\r\nlibrary(dplyr)\r\nlibrary(forcats)\r\n\r\n\r\n#app_dir <- \"C:/Users/viy009/OneDrive - University of Bergen/PhD/KJEM250/Source\"\r\n#out_dir <- \"C:/Users/viy009/OneDrive - University of Bergen/PhD/KJEM250/Laboratory\"\r\n#export(appdir = app_dir,destdir = out_dir)\r\n\r\n# Define the user interface\r\nui <- fluidPage(\r\n  titlePanel(\"Laboratory Volume Measurements\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      sliderInput(\"numStudents\",\r\n                  \"Number of Students:\",\r\n                  min = 1,\r\n                  max = 5,\r\n                  value = 1,\r\n                  step = 1),\r\n      \r\n      selectInput(\"ciOption\",\r\n                  \"Confidence Interval Option:\",\r\n                  choices = c(\"None\", \"Mean\", \"Individual\")),\r\n      \r\n      # Text input for the true volume\r\n    #  sliderInput(\"trueVolume\",\r\n     #             \"True Volume:\",\r\n      #            min = 0, \r\n       #           max = 20,\r\n        #          value = 10),\r\n      \r\n      # Slider input for the tolerance width\r\n     # sliderInput(\"tolerance\",\r\n      #            \"Tolerance:\",\r\n       #           min = 0,  # Define appropriate min, max based on expected range\r\n        #          max = 5,\r\n         #         value = 0.5),\r\n      \r\n      # Conditional Slider Input for the height adjustment factor\r\n      uiOutput(\"trueVolumeInput\"),\r\n      uiOutput(\"toleranceInput\"),\r\n      uiOutput(\"factorInput\"),\r\n      \r\n      uiOutput(\"volumeInputs\")\r\n    ),\r\n    \r\n    mainPanel(\r\n      plotOutput(\"tDistPlot\"),\r\n      tableOutput(\"dataView\")  # Table output for viewing the data frame\r\n    )\r\n  )\r\n)\r\n\r\n\r\n# Define server logic\r\nserver <- function(input, output) {\r\n  \r\n  output$volumeInputs <- renderUI({\r\n    numStudents <- input$numStudents\r\n    studentNames <- LETTERS[1:numStudents]  # Default names A, B, C, D, E\r\n    inputList <- lapply(1:numStudents, function(i) {\r\n      fluidRow(\r\n        column(6, textInput(inputId = paste(\"studentName\", i, sep = \"\"),\r\n                            label = sprintf(\"Student %d Name:\", i),\r\n                            value = studentNames[i])),  # Default name for each student\r\n        column(6, textInput(inputId = paste(\"volume\", i, sep = \"\"),\r\n                            label = \"Enter volumes, space-separated):\"))\r\n      )\r\n    })\r\n    do.call(tagList, inputList)\r\n  })\r\n  \r\n  \r\n  \r\n  \r\n  studentData <- reactive({\r\n    data <- data.frame(Student = character(), Volume = numeric(), Outlier = character())\r\n    \r\n    for(i in 1:input$numStudents) {\r\n      studentName <- input[[paste(\"studentName\", i, sep = \"\")]]\r\n      volumesStr <- unlist(strsplit(input[[paste(\"volume\", i, sep = \"\")]], \" \")) \r\n      volumes <- suppressWarnings(as.numeric(gsub(\",\", \".\", volumesStr, fixed = TRUE)))\r\n      \r\n      if(any(is.na(volumes))) {\r\n        warning(\"Non-numeric volume data encountered and converted to NA.\")\r\n        next\r\n      }\r\n      \r\n      if(length(volumes) > 2) {\r\n        originalVolumes <- volumes[order(abs(volumes), decreasing =TRUE)]\r\n        outlierFlags <- rep(\"Non-Outlier\", length(volumes))\r\n        \r\n        for (j in 1:length(originalVolumes)) {\r\n          if (j == 1){v <- originalVolumes}\r\n          if (j > 1){v <- v[-1]}\r\n          \r\n          test <- tryCatch(grubbs.test(v), warning = function(w) return(NULL), error = function(e) return(NULL))\r\n          \r\n          if(is.null(test) || test$p.value > 0.05) break\r\n          else outlierFlags[j] <- \"Outlier\"\r\n        }\r\n        \r\n        data <- rbind(data, data.frame(Student = rep(studentName, length(originalVolumes)),\r\n                                       Volume = originalVolumes,\r\n                                       Outlier = outlierFlags))\r\n      }\r\n    }\r\n    return(data)\r\n  })\r\n  \r\n  \r\n  output$factorInput <- renderUI({\r\n    if(input$ciOption != \"None\") {\r\n      sliderInput(\"heightFactor\",\r\n                  \"Height Adjustment Factor:\",\r\n                  min = -3,\r\n                  max = 0,\r\n                  value = 0,\r\n                  step = 0.1)\r\n    }\r\n    \r\n    \r\n    \r\n  })\r\n  output$trueVolumeInput <- renderUI({\r\n    sliderInput(\"trueVolumeInput\",\r\n                \"True Volume:\",\r\n                min = 0, \r\n                max = 20,\r\n                value = 10,\r\n                step = 0.5)\r\n  })\r\n  \r\n  output$toleranceInput <- renderUI({\r\n    sliderInput(\"toleranceInput\",\r\n                \"Tolerance:\",\r\n                min = 0, \r\n                max = 1,\r\n                value = 0.05,\r\n                step = 0.01)\r\n  })\r\n  \r\n  \r\n  \r\n  output$tDistPlot <- renderPlot({\r\n    data <- studentData()\r\n    plotData <- data %>%\r\n      filter(Outlier == \"Non-Outlier\") %>%\r\n      group_by(Student) %>%\r\n      summarize(\r\n        Mean = mean(Volume),\r\n        SD = sd(Volume),\r\n        n = n()\r\n      ) %>%\r\n      rowwise() %>%\r\n      do({\r\n        volumes <- seq(.$Mean - 3.5 * .$SD, .$Mean + 3.5 * .$SD, length.out = 100)\r\n        data.frame(Student = .$Student, Volume = volumes, Density = dnorm(volumes, .$Mean, .$SD))\r\n      }) %>%\r\n      ungroup()\r\n  xRange <- range(c(plotData$Volume, data$Volume), na.rm = TRUE)\r\n  \r\n # currentTrueVolume <- reactiveTrueVolume()\r\n  \r\n    p <- ggplot() +\r\n      geom_line(data = plotData, aes(x = Volume, y = Density, color = Student)) +\r\n      geom_rect(aes(xmin=input$trueVolumeInput+input$toleranceInput,\r\n                    xmax=input$trueVolumeInput-input$toleranceInput,\r\n                    ymin = -Inf, ymax = Inf), color = 'purple', alpha  = 0.1)+\r\n     geom_vline(xintercept = input$trueVolumeInput, linetype = 'dashed', lwd = 2)+\r\n      geom_point(data = data, aes(x = Volume, y = 0, color = Student, shape = Outlier), size = 3) +\r\n      scale_x_continuous(limits = xRange) +\r\n      scale_shape_manual(values = c(\"Non-Outlier\" = 16, \"Outlier\" = 8)) +\r\n      theme_minimal() +\r\n      labs(title = \"Volume Measurements and Distributions\", x = \"Volume\", y = \"Density\", color = \"Student\")\r\n\r\n    if (input$ciOption != \"None\") {\r\n      ciData <- data %>% \r\n                  filter(Outlier == 'Non-Outlier') %>%\r\n                  group_by(Student) %>%\r\n                  summarize(Mean = mean(Volume), SD = sd(Volume), n = n(), .groups = 'drop') %>%\r\n                  mutate(OrderedStudent = fct_reorder(Student, Mean))\r\n      \r\n      p <- p +geom_errorbar(\r\n        data = ciData,\r\n        aes(y = as.numeric(OrderedStudent)*input$heightFactor, \r\n            xmin = Mean - SD * qt(0.975, n - 1)*ifelse(input$ciOption == \"Mean\", 1/sqrt(n), 1), \r\n            xmax = Mean + SD * qt(0.975, n - 1)*ifelse(input$ciOption == \"Mean\", 1/sqrt(n), 1),\r\n            color = Student),\r\n        width = 0.1\r\n      )\r\n    }\r\n    \r\n    # Return the plot with tolerance area and true volume line\r\n    p\r\n   })\r\n  \r\n  output$dataView <- renderTable({\r\n    studentData()\r\n  })\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
