[{"name":"Old/TestDat.xlsx","content":"UEsDBBQABgAIAAAAIQCkU8XPTgEAAAgEAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIo\noAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACsk8tOwzAQRfdI/EPkLYrdskAINe2CxxK6\nKB9g4kli1S953NL+PRP3sUChFWo3sWLP3HM9M57MNtYUa4iovavYmI9YAa72Sru2Yp+Lt/KR\nFZikU9J4BxXbArLZ9PZmstgGwIKyHVasSyk8CYF1B1Yi9wEcnTQ+WpnoN7YiyHopWxD3o9GD\nqL1L4FKZeg02nbxAI1cmFa8b2t45iWCQFc+7wJ5VMRmC0bVM5FSsnfpFKfcETpk5Bjsd8I5s\nMDFI6E/+BuzzPqg0USso5jKmd2nJhtgY8e3j8sv7JT8tMuDSN42uQfl6ZakCHEMEqbADSNbw\nvHIrtTv4PsHPwSjyMr6ykf5+WfiMj0T9BpG/l1vIMmeAmLYG8Nplz6KnyNSvefQBaXIj/J9+\nGM0+uwwkBDFpOA7nUJOPRJr6i68L/btSoAbYIr/j6Q8AAAD//wMAUEsDBBQABgAIAAAAIQC1\nVTAj9AAAAEwCAAALAAgCX3JlbHMvLnJlbHMgogQCKKAAAgAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAArJJNT8MwDIbvSPyHyPfV3ZAQQkt3QUi7IVR+gEncD7WNoyQb3b8nHBBUGoMDR3+9\nfvzK2908jerIIfbiNKyLEhQ7I7Z3rYaX+nF1ByomcpZGcazhxBF21fXV9plHSnkodr2PKqu4\nqKFLyd8jRtPxRLEQzy5XGgkTpRyGFj2ZgVrGTVneYviuAdVCU+2thrC3N6Dqk8+bf9eWpukN\nP4g5TOzSmRXIc2Jn2a58yGwh9fkaVVNoOWmwYp5yOiJ5X2RswPNEm78T/XwtTpzIUiI0Evgy\nz0fHJaD1f1q0NPHLnXnENwnDq8jwyYKLH6jeAQAA//8DAFBLAwQUAAYACAAAACEAGkbsn5sD\nAAD9CAAADwAAAHhsL3dvcmtib29rLnhtbKxVbY+jNhD+Xqn/AfGdxSZAErTJCQKo225OUTbd\nbT+tHHCCFcDUmE3S0/33jiFkdy+nKt1rXgZsjx+emXnG3H46FLn2QkXNeDnR8Q3SNVomPGXl\n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","type":"binary"},{"name":"Old/app.r","content":"library(shiny)\r\nlibrary(ggplot2)\r\nlibrary(RColorBrewer)\r\nlibrary(wesanderson)\r\n#library(shinythemes)\r\nlibrary(shinylive)\r\n#runGitHub('Teaching', username = 'matbre17', ref = 'main',)\r\n\r\n#app_dir <- \"C:/Users/viy009/OneDrive - University of Bergen/PhD/KJEM250\"\r\n#out_dir <- \"C:/Users/viy009/OneDrive - University of Bergen/PhD/KJEM250/Laboratory\"\r\n#export(appdir = app_dir,destdir = out_dir)\r\n# Define the user interface\r\nui <- fluidPage(\r\n  titlePanel(\"Laboratory Volume Measurements\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      sliderInput(\"numStudents\",\r\n                  \"Number of Students:\",\r\n                  min = 1,\r\n                  max = 5,\r\n                  value = 1,\r\n                  step = 1),\r\n      \r\n      uiOutput(\"volumeInputs\"),\r\n      \r\n      numericInput(\"xMin\", \"X-axis Minimum:\", value = 9),\r\n      numericInput(\"xMax\", \"X-axis Maximum:\", value = 11),\r\n      numericInput(\"yMin\", \"Y-axis Minimum:\", value = 0),\r\n      numericInput(\"yMax\", \"Y-axis Maximum:\", value = 3),\r\n      \r\n      numericInput(\"trueValue\", \"True Value:\", value = 10),\r\n      textInput(\"trueValueLabel\", \"Label for True Value:\", value = \"True Value\"),\r\n      \r\n      textInput(\"xTitle\", \"X-axis Title:\", value = \"Volume\"),\r\n      textInput(\"yTitle\", \"Y-axis Title:\", value = \"Density\"),\r\n      \r\n      selectInput(\"colorScheme\", \"Color Scheme:\",\r\n                  choices = c(\"Spectral\", \"PRGn\", \"Set3\", \"Set2\", \"Set1\", \"Dark2\", \r\n                              \"FantasticFox1\", \"Moonrise3\"))\r\n    ),\r\n    \r\n    mainPanel(\r\n      textOutput(\"statsOutput\"),\r\n      plotOutput(\"tDistPlot\"),\r\n      tableOutput(\"comparisonResults\")\r\n    )\r\n  )\r\n)\r\n\r\n# Define the server logic\r\nserver <- function(input, output) {\r\n  \r\n  output$volumeInputs <- renderUI({\r\n    numStudents <- input$numStudents\r\n    lapply(1:numStudents, function(i) {\r\n      textInput(inputId = paste(\"volume\", i, sep = \"\"),\r\n                label = sprintf(\"Enter volumes for Student %d (comma-separated):\", i))\r\n    })\r\n  })\r\n  \r\n  output$statsOutput <- renderText({\r\n    req(input$numStudents)\r\n    statsList <- lapply(1:input$numStudents, function(i) {\r\n      volumes <- unlist(strsplit(input[[paste(\"volume\", i, sep = \"\")]], \",\\\\s*\"))\r\n      volumes <- as.numeric(volumes)\r\n      if(!any(is.na(volumes)) && length(volumes) > 0) {\r\n        meanVal <- mean(volumes)\r\n        sdVal <- sd(volumes)\r\n        return(sprintf(\"Student %d: Mean = %.2f, SD = %.2f, N = %d\", i, meanVal, sdVal, length(volumes)))\r\n      } else {\r\n        return(sprintf(\"Student %d: Please enter valid numbers or ensure there is data.\", i))\r\n      }\r\n    })\r\n    paste(statsList, collapse = \"\\n\")\r\n  })\r\n  \r\n  output$tDistPlot <- renderPlot({\r\n    req(input$numStudents)\r\n    \r\n    plotData <- data.frame()\r\n    for(i in 1:input$numStudents) {\r\n      volumes <- unlist(strsplit(input[[paste(\"volume\", i, sep = \"\")]], \",\\\\s*\"))\r\n      volumes <- as.numeric(volumes)\r\n      if(!any(is.na(volumes)) && length(volumes) > 0) {\r\n        df <- length(volumes) - 1\r\n        meanVal <- mean(volumes)\r\n        sdVal <- sd(volumes)\r\n        x <- seq(meanVal - 3 * sdVal, meanVal + 3 * sdVal, length.out = 200)\r\n        y <- dt((x - meanVal) / sdVal, df) / sdVal\r\n        plotData <- rbind(plotData, data.frame(Student = as.factor(i), Volume = x, Density = y))\r\n      }\r\n    }\r\n    \r\n    colorPalette <- if(input$colorScheme %in% c(\"FantasticFox1\", \"Moonrise3\")) {\r\n      wes_palette(input$colorScheme, length(unique(plotData$Student)), type = \"discrete\")\r\n    } else if(input$colorScheme %in% rownames(brewer.pal.info)) {\r\n      brewer.pal(min(5, brewer.pal.info[input$colorScheme, \"maxcolors\"]), input$colorScheme)\r\n    } else {\r\n      brewer.pal(5, \"Set1\")\r\n    }\r\n    \r\n    ggplot(plotData, aes(x = Volume, y = Density, color = Student)) +\r\n      geom_line() +\r\n      geom_vline(aes(xintercept = input$trueValue, linetype = \" \"), color = \"black\") +\r\n      scale_linetype_manual(values = c(\" \" = \"dashed\")) +\r\n      scale_x_continuous(limits = c(input$xMin, input$xMax)) +\r\n      scale_y_continuous(limits = c(input$yMin, input$yMax)) +\r\n      scale_color_manual(values = colorPalette) +\r\n      theme_minimal() +\r\n      labs(title = \"T-Distributions of Students' Volumes\",\r\n           x = input$xTitle,\r\n           y = input$yTitle,\r\n           color = \"Student\",\r\n           linetype = input$trueValueLabel)\r\n  })\r\n  \r\n  output$comparisonResults <- renderTable({\r\n    req(input$numStudents)\r\n    \r\n    studentData <- lapply(1:input$numStudents, function(i) {\r\n      volumes <- unlist(strsplit(input[[paste(\"volume\", i, sep = \"\")]], \",\\\\s*\"))\r\n      as.numeric(volumes)\r\n    })\r\n    \r\n    results <- data.frame(Student1 = character(),\r\n                          Student2 = character(),\r\n                          FTestPValue = numeric(),\r\n                          TTestType = character(),\r\n                          TTestPValue = numeric(),\r\n                          stringsAsFactors = FALSE)\r\n    \r\n    for(i in 1:(input$numStudents-1)) {\r\n      for(j in (i+1):input$numStudents) {\r\n        if(!any(is.na(studentData[[i]])) && !any(is.na(studentData[[j]]))) {\r\n          ftest <- var.test(studentData[[i]], studentData[[j]])\r\n          fPValue <- ftest$p.value\r\n          \r\n          if(fPValue < 0.05) {\r\n            ttest <- t.test(studentData[[i]], studentData[[j]], var.equal = FALSE)\r\n            testType <- \"Welch\"\r\n          } else {\r\n            ttest <- t.test(studentData[[i]], studentData[[j]], var.equal = TRUE)\r\n            testType <- \"Standard\"\r\n          }\r\n          \r\n          results <- rbind(results, c(i, j, fPValue, testType, ttest$p.value))\r\n        }\r\n      }\r\n    }\r\n    \r\n    colnames(results) <- c(\"Student1\", \"Student2\", \"FTestPValue\", \"TTestType\", \"TTestPValue\")\r\n    \r\n    return(results)\r\n  })\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"Old/app_v06.r","content":"library(shiny)\r\nlibrary(ggplot2)\r\nlibrary(RColorBrewer)\r\nlibrary(wesanderson)\r\nlibrary(shinylive)\r\n\r\n# Define the user interface\r\nui <- fluidPage(\r\n  titlePanel(\"Laboratory Volume Measurements\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      sliderInput(\"numStudents\",\r\n                  \"Number of Students:\",\r\n                  min = 1,\r\n                  max = 5,\r\n                  value = 1,\r\n                  step = 1),\r\n      \r\n      uiOutput(\"volumeInputs\"),\r\n      \r\n      numericInput(\"trueValue\", \"True Value:\", value = 10),\r\n      textInput(\"trueValueLabel\", \"Label for True Value:\", value = \"True Value\"),\r\n      \r\n      textInput(\"xTitle\", \"X-axis Title:\", value = \"Volume\"),\r\n      textInput(\"yTitle\", \"Y-axis Title:\", value = \"Density\")\r\n    ),\r\n    \r\n    mainPanel(\r\n      plotOutput(\"tDistPlot\")\r\n    )\r\n  )\r\n)\r\n\r\n# Define the server logic\r\nserver <- function(input, output) {\r\n  \r\n  output$volumeInputs <- renderUI({\r\n    numStudents <- input$numStudents\r\n    inputList <- lapply(1:numStudents, function(i) {\r\n      fluidRow(\r\n        column(6, textInput(inputId = paste(\"studentName\", i, sep = \"\"),\r\n                            label = sprintf(\"Student %d Name:\", i))),\r\n        column(6, textInput(inputId = paste(\"volume\", i, sep = \"\"),\r\n                            label = \"Enter volumes (comma as decimal, space-separated):\"))\r\n      )\r\n    })\r\n    do.call(tagList, inputList)\r\n  })\r\n  \r\n  output$tDistPlot <- renderPlot({\r\n    req(input$numStudents)\r\n    \r\n    plotData <- data.frame()\r\n    allMeans <- numeric()\r\n    allSDs <- numeric()\r\n    \r\n    for(i in 1:input$numStudents) {\r\n      studentName <- input[[paste(\"studentName\", i, sep = \"\")]]\r\n      volumes <- unlist(strsplit(input[[paste(\"volume\", i, sep = \"\")]], \" \"))\r\n      volumes <- as.numeric(gsub(\",\", \".\", volumes, fixed = TRUE))\r\n      \r\n      if(!any(is.na(volumes)) && length(volumes) > 0) {\r\n        df <- length(volumes) - 1\r\n        meanVal <- mean(volumes)\r\n        sdVal <- sd(volumes)\r\n        allMeans <- c(allMeans, meanVal)\r\n        allSDs <- c(allSDs, sdVal)\r\n        x <- seq(meanVal - 3 * sdVal, meanVal + 3 * sdVal, length.out = 200)\r\n        y <- dt((x - meanVal) / sdVal, df) / sdVal\r\n        plotData <- rbind(plotData, data.frame(Name = studentName, Volume = x, Density = y))\r\n      }\r\n    }\r\n    \r\n    # Define fixed color palette\r\n    colorPalette <- c(\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\")\r\n    \r\n    # Calculate x-axis limits\r\n    xMin <- min(allMeans) - 3.5 * max(allSDs)\r\n    xMax <- max(allMeans) + 3.5 * max(allSDs)\r\n    \r\n    # Calculate y-axis max\r\n    yMax <- max(plotData$Density, na.rm = TRUE)\r\n    \r\n    ggplot(plotData, aes(x = Volume, y = Density, color = Name)) +\r\n      geom_line() +\r\n      geom_vline(aes(xintercept = input$trueValue, linetype = \" \"), color = \"black\") +\r\n      scale_linetype_manual(values = c(\" \" = \"dashed\")) +\r\n      scale_x_continuous(limits = c(xMin, xMax)) +\r\n      scale_y_continuous(limits = c(0, yMax)) +\r\n      scale_color_manual(values = colorPalette) +\r\n      theme_minimal() +\r\n      labs(title = \"T-Distributions of Students' Volumes\",\r\n           x = input$xTitle,\r\n           y = input$yTitle,\r\n           color = \"Name\",\r\n           linetype = input$trueValueLabel)\r\n  })\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n\r\n","type":"text"},{"name":"Old/app_v065.r","content":"library(shiny)\r\nlibrary(ggplot2)\r\nlibrary(outliers)\r\nlibrary(dplyr)\r\n\r\n# Define the user interface\r\nui <- fluidPage(\r\n  titlePanel(\"Laboratory Volume Measurements\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      sliderInput(\"numStudents\",\r\n                  \"Number of Students:\",\r\n                  min = 1,\r\n                  max = 5,\r\n                  value = 1,\r\n                  step = 1),\r\n      \r\n      selectInput(\"ciOption\",\r\n                  \"Confidence Interval Option:\",\r\n                  choices = c(\"None\", \"Mean\", \"Individual\")),\r\n      \r\n      uiOutput(\"volumeInputs\")\r\n    ),\r\n    \r\n    mainPanel(\r\n      plotOutput(\"tDistPlot\"),\r\n      tableOutput(\"dataView\")  # Table output for viewing the data frame\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic\r\nserver <- function(input, output) {\r\n  \r\n  output$volumeInputs <- renderUI({\r\n    numStudents <- input$numStudents\r\n    studentNames <- LETTERS[1:numStudents]  # Default names A, B, C, D, E\r\n    inputList <- lapply(1:numStudents, function(i) {\r\n      fluidRow(\r\n        column(6, textInput(inputId = paste(\"studentName\", i, sep = \"\"),\r\n                            label = sprintf(\"Student %d Name:\", i),\r\n                            value = studentNames[i])),  # Default name for each student\r\n        column(6, textInput(inputId = paste(\"volume\", i, sep = \"\"),\r\n                            label = \"Enter volumes (comma as decimal, space-separated):\"))\r\n      )\r\n    })\r\n    do.call(tagList, inputList)\r\n  })\r\n  \r\n  studentData <- reactive({\r\n    data <- data.frame(Student = character(), Volume = numeric(), Outlier = character())\r\n    \r\n    for(i in 1:input$numStudents) {\r\n      studentName <- input[[paste(\"studentName\", i, sep = \"\")]]\r\n      volumesStr <- unlist(strsplit(input[[paste(\"volume\", i, sep = \"\")]], \" \")) \r\n      volumes <- suppressWarnings(as.numeric(gsub(\",\", \".\", volumesStr, fixed = TRUE)))\r\n      \r\n      if(any(is.na(volumes))) {\r\n        warning(\"Non-numeric volume data encountered and converted to NA.\")\r\n        next\r\n      }\r\n      \r\n      if(length(volumes) > 2) {\r\n        originalVolumes <- volumes[order(abs(volumes), decreasing =TRUE)]\r\n        outlierFlags <- rep(\"Non-Outlier\", length(volumes))\r\n        \r\n        for (j in 1:length(originalVolumes)) {\r\n          if (j == 1){v <- originalVolumes}\r\n          if (j > 1){v <- v[-1]}\r\n          \r\n          test <- tryCatch(grubbs.test(v), warning = function(w) return(NULL), error = function(e) return(NULL))\r\n          \r\n          if(is.null(test) || test$p.value > 0.05) break\r\n          else outlierFlags[j] <- \"Outlier\"\r\n        }\r\n        \r\n        data <- rbind(data, data.frame(Student = rep(studentName, length(originalVolumes)),\r\n                                       Volume = originalVolumes,\r\n                                       Outlier = outlierFlags))\r\n      }\r\n    }\r\n    return(data)\r\n  })\r\n  \r\n  output$tDistPlot <- renderPlot({\r\n    data <- studentData()\r\n    \r\n    plotData <- data %>%\r\n      filter(Outlier == \"Non-Outlier\") %>%\r\n      group_by(Student) %>%\r\n      summarize(\r\n        Mean = mean(Volume),\r\n        SD = sd(Volume),\r\n        n = n()\r\n      ) %>%\r\n      rowwise() %>%\r\n      do({\r\n        volumes <- seq(.$Mean - 3.5 * .$SD, .$Mean + 3.5 * .$SD, length.out = 100)\r\n        data.frame(Student = .$Student, Volume = volumes, Density = dnorm(volumes, .$Mean, .$SD))\r\n      }) %>%\r\n      ungroup()\r\n    \r\n    xRange <- range(plotData$Volume, na.rm = TRUE)\r\n    \r\n    ggplot() +\r\n      geom_line(data = plotData, aes(x = Volume, y = Density, color = Student)) +\r\n      geom_point(data = data, aes(x = Volume, y = 0, color = Student, shape = Outlier)) +\r\n      scale_x_continuous(limits = xRange) +\r\n      scale_shape_manual(values = c(\"Non-Outlier\" = 16, \"Outlier\" = 4)) +\r\n      theme_minimal() +\r\n      labs(title = \"Volume Measurements and Distributions\",\r\n           x = \"Volume\", y = \"Density\", color = \"Student\") #+\r\n     # if (input$ciOption == \"None\"){}\r\n      #else{\r\n      #geom_errorbar(data = data %>% \r\n       #               filter(Outlier == 'Non-Outlier') %>%\r\n        #              group_by(Student) %>%\r\n         #             summarize(\r\n          #              Mean = mean(Volume),\r\n           #             SD = sd(Volume),\r\n            #            n = n(),\r\n             #           Ypos = as.numeric(factor(Student)) * -0.5  # Assign unique Y position based on Student factor\r\n              #        ),\r\n               #     aes(y = Ypos, \r\n                #        xmin = Mean - SD * qt(0.975, n - 1) / sqrt(n)* ifelse(input$ciOption == \"Mean\", 1/sqrt(n), 1), \r\n                 #       xmax = Mean + SD * qt(0.975, n - 1) / sqrt(n)* ifelse(input$ciOption == \"Mean\", 1/sqrt(n), 1), \r\n                  #      color = Student),\r\n                   # width = 0.1)\r\n      #}\r\n  })\r\n  \r\n  output$dataView <- renderTable({\r\n    studentData()\r\n  })\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"app.r","content":"library(shiny)\r\nlibrary(ggplot2)\r\nlibrary(outliers)\r\nlibrary(dplyr)\r\nlibrary(forcats)\r\n\r\n\r\napp_dir <- \"C:/Users/viy009/OneDrive - University of Bergen/PhD/KJEM250/Source\"\r\nout_dir <- \"C:/Users/viy009/OneDrive - University of Bergen/PhD/KJEM250/Laboratory\"\r\nexport(appdir = app_dir,destdir = out_dir)\r\n\r\n# Define the user interface\r\nui <- fluidPage(\r\n  titlePanel(\"Laboratory Volume Measurements\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      sliderInput(\"numStudents\",\r\n                  \"Number of Students:\",\r\n                  min = 1,\r\n                  max = 5,\r\n                  value = 1,\r\n                  step = 1),\r\n      \r\n      selectInput(\"ciOption\",\r\n                  \"Confidence Interval Option:\",\r\n                  choices = c(\"None\", \"Mean\", \"Individual\")),\r\n      \r\n      # Text input for the true volume\r\n    #  sliderInput(\"trueVolume\",\r\n     #             \"True Volume:\",\r\n      #            min = 0, \r\n       #           max = 20,\r\n        #          value = 10),\r\n      \r\n      # Slider input for the tolerance width\r\n     # sliderInput(\"tolerance\",\r\n      #            \"Tolerance:\",\r\n       #           min = 0,  # Define appropriate min, max based on expected range\r\n        #          max = 5,\r\n         #         value = 0.5),\r\n      \r\n      # Conditional Slider Input for the height adjustment factor\r\n      uiOutput(\"trueVolumeInput\"),\r\n      uiOutput(\"toleranceInput\"),\r\n      uiOutput(\"factorInput\"),\r\n      \r\n      uiOutput(\"volumeInputs\")\r\n    ),\r\n    \r\n    mainPanel(\r\n      plotOutput(\"tDistPlot\"),\r\n      tableOutput(\"dataView\")  # Table output for viewing the data frame\r\n    )\r\n  )\r\n)\r\n\r\n\r\n# Define server logic\r\nserver <- function(input, output) {\r\n  \r\n  output$volumeInputs <- renderUI({\r\n    numStudents <- input$numStudents\r\n    studentNames <- LETTERS[1:numStudents]  # Default names A, B, C, D, E\r\n    inputList <- lapply(1:numStudents, function(i) {\r\n      fluidRow(\r\n        column(6, textInput(inputId = paste(\"studentName\", i, sep = \"\"),\r\n                            label = sprintf(\"Student %d Name:\", i),\r\n                            value = studentNames[i])),  # Default name for each student\r\n        column(6, textInput(inputId = paste(\"volume\", i, sep = \"\"),\r\n                            label = \"Enter volumes, space-separated):\"))\r\n      )\r\n    })\r\n    do.call(tagList, inputList)\r\n  })\r\n  \r\n  \r\n  \r\n  \r\n  studentData <- reactive({\r\n    data <- data.frame(Student = character(), Volume = numeric(), Outlier = character())\r\n    \r\n    for(i in 1:input$numStudents) {\r\n      studentName <- input[[paste(\"studentName\", i, sep = \"\")]]\r\n      volumesStr <- unlist(strsplit(input[[paste(\"volume\", i, sep = \"\")]], \" \")) \r\n      volumes <- suppressWarnings(as.numeric(gsub(\",\", \".\", volumesStr, fixed = TRUE)))\r\n      \r\n      if(any(is.na(volumes))) {\r\n        warning(\"Non-numeric volume data encountered and converted to NA.\")\r\n        next\r\n      }\r\n      \r\n      if(length(volumes) > 2) {\r\n        originalVolumes <- volumes[order(abs(volumes), decreasing =TRUE)]\r\n        outlierFlags <- rep(\"Non-Outlier\", length(volumes))\r\n        \r\n        for (j in 1:length(originalVolumes)) {\r\n          if (j == 1){v <- originalVolumes}\r\n          if (j > 1){v <- v[-1]}\r\n          \r\n          test <- tryCatch(grubbs.test(v), warning = function(w) return(NULL), error = function(e) return(NULL))\r\n          \r\n          if(is.null(test) || test$p.value > 0.05) break\r\n          else outlierFlags[j] <- \"Outlier\"\r\n        }\r\n        \r\n        data <- rbind(data, data.frame(Student = rep(studentName, length(originalVolumes)),\r\n                                       Volume = originalVolumes,\r\n                                       Outlier = outlierFlags))\r\n      }\r\n    }\r\n    return(data)\r\n  })\r\n  \r\n  \r\n  output$factorInput <- renderUI({\r\n    if(input$ciOption != \"None\") {\r\n      sliderInput(\"heightFactor\",\r\n                  \"Height Adjustment Factor:\",\r\n                  min = -3,\r\n                  max = 0,\r\n                  value = 0,\r\n                  step = 0.1)\r\n    }\r\n    \r\n    \r\n    \r\n  })\r\n  output$trueVolumeInput <- renderUI({\r\n    sliderInput(\"trueVolumeInput\",\r\n                \"True Volume:\",\r\n                min = 0, \r\n                max = 20,\r\n                value = 10,\r\n                step = 0.5)\r\n  })\r\n  \r\n  output$toleranceInput <- renderUI({\r\n    sliderInput(\"toleranceInput\",\r\n                \"Tolerance:\",\r\n                min = 0, \r\n                max = 1,\r\n                value = 0.05,\r\n                step = 0.01)\r\n  })\r\n  \r\n  \r\n  \r\n  output$tDistPlot <- renderPlot({\r\n    data <- studentData()\r\n    plotData <- data %>%\r\n      filter(Outlier == \"Non-Outlier\") %>%\r\n      group_by(Student) %>%\r\n      summarize(\r\n        Mean = mean(Volume),\r\n        SD = sd(Volume),\r\n        n = n()\r\n      ) %>%\r\n      rowwise() %>%\r\n      do({\r\n        volumes <- seq(.$Mean - 3.5 * .$SD, .$Mean + 3.5 * .$SD, length.out = 100)\r\n        data.frame(Student = .$Student, Volume = volumes, Density = dnorm(volumes, .$Mean, .$SD))\r\n      }) %>%\r\n      ungroup()\r\n  xRange <- range(c(plotData$Volume, data$Volume), na.rm = TRUE)\r\n  \r\n # currentTrueVolume <- reactiveTrueVolume()\r\n  \r\n    p <- ggplot() +\r\n      geom_line(data = plotData, aes(x = Volume, y = Density, color = Student)) +\r\n      geom_rect(aes(xmin=input$trueVolumeInput+input$toleranceInput,\r\n                    xmax=input$trueVolumeInput-input$toleranceInput,\r\n                    ymin = -Inf, ymax = Inf), color = 'purple', alpha  = 0.1)+\r\n     geom_vline(xintercept = input$trueVolumeInput, linetype = 'dashed', lwd = 2)+\r\n      geom_point(data = data, aes(x = Volume, y = 0, color = Student, shape = Outlier), size = 3) +\r\n      scale_x_continuous(limits = xRange) +\r\n      scale_shape_manual(values = c(\"Non-Outlier\" = 16, \"Outlier\" = 8)) +\r\n      theme_minimal() +\r\n      labs(title = \"Volume Measurements and Distributions\", x = \"Volume\", y = \"Density\", color = \"Student\")\r\n\r\n    if (input$ciOption != \"None\") {\r\n      ciData <- data %>% \r\n                  filter(Outlier == 'Non-Outlier') %>%\r\n                  group_by(Student) %>%\r\n                  summarize(Mean = mean(Volume), SD = sd(Volume), n = n(), .groups = 'drop') %>%\r\n                  mutate(OrderedStudent = fct_reorder(Student, Mean))\r\n      \r\n      p <- p +geom_errorbar(\r\n        data = ciData,\r\n        aes(y = as.numeric(OrderedStudent)*input$heightFactor, \r\n            xmin = Mean - SD * qt(0.975, n - 1)*ifelse(input$ciOption == \"Mean\", 1/sqrt(n), 1), \r\n            xmax = Mean + SD * qt(0.975, n - 1)*ifelse(input$ciOption == \"Mean\", 1/sqrt(n), 1),\r\n            color = Student),\r\n        width = 0.1\r\n      )\r\n    }\r\n    \r\n    # Return the plot with tolerance area and true volume line\r\n    p\r\n   })\r\n  \r\n  output$dataView <- renderTable({\r\n    studentData()\r\n  })\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
